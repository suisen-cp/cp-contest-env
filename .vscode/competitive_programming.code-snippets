{
	// Place your Cpp ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "fast cin": {
        "scope": "cpp",
        "prefix": "fast cin",
        "body": [
            "ios::sync_with_stdio(false);",
            "cin.tie(nullptr);"
        ]
    },
    "int inf": {
        "scope": "cpp",
        "prefix": "iinf",
        "body": [ "numeric_limits<int>::max()" ]
    },
    "long inf": {
        "scope": "cpp",
        "prefix": "linf",
        "body": [ "numeric_limits<ll>::max()" ]
    },
    "constexpr": {
        "scope": "cpp",
        "prefix": "cex",
        "body": [ "constexpr" ]
    },
    "use modint": {
        "scope": "cpp",
        "prefix": "modint",
        "body": [
            "#include <atcoder/modint>",
            "",
            "using mint = atcoder::modint$1;",
            "",
            "std::istream& operator>>(std::istream& in, mint &a) {",
            "    long long e; in >> e; a = e;",
            "    return in;",
            "}",
            "",
            "std::ostream& operator<<(std::ostream& out, const mint &a) {",
            "    out << a.val();",
            "    return out;",
            "}",
        ]
    },
}