{
	// Place your Cpp ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "qc fium": {
        "scope": "cpp",
        "prefix": "qcfium",
        "body": [
            "#pragma GCC target(\"avx2\")",
            "#pragma GCC optimize(\"O3\")",
            "#pragma GCC optimize(\"unroll-loops\")",
        ]
    },
    "int inf": {
        "scope": "cpp",
        "prefix": "iinf",
        "body": [ "numeric_limits<int>::max()" ]
    },
    "long inf": {
        "scope": "cpp",
        "prefix": "linf",
        "body": [ "numeric_limits<long long>::max()" ]
    },
    "constexpr": {
        "scope": "cpp",
        "prefix": "cex",
        "body": [ "constexpr" ]
    },
    "use modint": {
        "scope": "cpp",
        "prefix": "modint",
        "body": [
            "#include <atcoder/modint>",
            "",
            "using mint = atcoder::modint$1;",
            "",
            "std::istream& operator>>(std::istream& in, mint &a) {",
            "    long long e; in >> e; a = e;",
            "    return in;",
            "}",
            "",
            "std::ostream& operator<<(std::ostream& out, const mint &a) {",
            "    out << a.val();",
            "    return out;",
            "}",
        ]
    },
    "set default multiplication to FPS": {
        "scope": "cpp",
        "prefix": "initfps",
        "body": "suisen::FPS<mint>::set_multiplication([](const auto &a, const auto &b) { return atcoder::convolution(a, b); });"
    },
    "find path on tree": {
        "scope": "cpp",
        "prefix": "find_path_on_tree",
        "body": [
            "auto find_path_on_tree(const vector<vector<int>> &g, int u, int v) {",
            "    vector<int> res;",
            "    auto dfs = [&](auto dfs, int cur, int par) -> bool {",
            "        res.push_back(cur);",
            "        if (cur == v) return true;",
            "        for (int nxt : g[cur]) if (nxt != par and dfs(dfs, nxt, cur)) return true;",
            "        res.pop_back();",
            "        return false;",
            "    };",
            "    dfs(dfs, u, -1);",
            "    return res;",
            "}"
        ]
    },
    "enable simd": {
        "scope": "cpp",
        "prefix": "include_simd",
        "body": [
            "#ifdef _MSC_VER",
            "#  include <intrin.h>",
            "#else",
            "#  include <x86intrin.h>",
            "#endif",
        ]
    }
}